package backtester

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strings"
	"time"

	"bt/internal"
)

// FileSaver ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã
type FileSaver struct{}

// NewFileSaver ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è FileSaver
func NewFileSaver() *FileSaver {
	return &FileSaver{}
}

// SaveTopStrategies ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ø-N —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
func (s *FileSaver) SaveTopStrategies(candles []internal.Candle, results []BenchmarkResult, inputFilename string, topN int) error {
	if len(results) < topN || topN <= 0 {
		if topN > 0 {
			return fmt.Errorf("–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø-%d (–¥–æ—Å—Ç—É–ø–Ω–æ: %d)", topN, len(results))
		}
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
	baseName := strings.TrimSuffix(filepath.Base(inputFilename), filepath.Ext(inputFilename))

	for i := 0; i < topN && i < len(results); i++ {
		strategyName := results[i].Name

		// –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
		strategy := internal.GetStrategy(strategyName)
		solidStrategy, ok := strategy.(internal.SolidStrategy)
		if !ok {
			log.Printf("‚ö†Ô∏è  –°—Ç—Ä–∞—Ç–µ–≥–∏—è %s –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SOLID –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º", strategyName)
			continue
		}

		config := solidStrategy.OptimizeWithConfig(candles)
		signals := solidStrategy.GenerateSignalsWithConfig(candles, config)

		// –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —Å–≤–µ—á–µ–π —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
		candlesWithSignals := make([]CandleWithSignal, len(candles))
		for j, candle := range candles {
			// Normalize time: prefer pre-parsed ParsedTime if available, fallback to original string
			ts := candle.Time
			t := candle.ToTime()
			if !t.IsZero() {
				ts = t.Format(time.RFC3339Nano)
			}
			candlesWithSignals[j] = CandleWithSignal{
				Time:   ts,
				Open:   candle.Open.ToFloat64(),
				High:   candle.High.ToFloat64(),
				Low:    candle.Low.ToFloat64(),
				Close:  candle.Close.ToFloat64(),
				Volume: candle.VolumeFloat64(),
				Signal: getSignalAtIndex(signals, j),
			}
		}

		// –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø–æ—Å—Ç—Ñ–∏–∫—Å–æ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
		outputFilename := fmt.Sprintf("%s_%s_signals.json", baseName, strategyName)

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
		data := struct {
			Strategy string                  `json:"strategy"`
			Config   internal.StrategyConfig `json:"config"`
			Profit   float64                 `json:"profit"`
			Candles  []CandleWithSignal      `json:"candles"`
		}{
			Strategy: strategyName,
			Config:   config,
			Profit:   results[i].TotalProfit,
			Candles:  candlesWithSignals,
		}

		jsonData, err := json.MarshalIndent(data, "", "  ")
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è %s: %v", strategyName, err)
			continue
		}

		err = os.WriteFile(outputFilename, jsonData, 0644)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", outputFilename, err)
			continue
		}

		fmt.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏: %s (–ø—Ä–∏–±—ã–ª—å: %.2f%%, —Å–∏–≥–Ω–∞–ª–æ–≤: %d)\n",
			outputFilename, results[i].TotalProfit*100, countSignals(signals))
	}

	return nil
}

// getSignalAtIndex ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–≥–Ω–∞–ª –ø–æ –∏–Ω–¥–µ–∫—Å—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥—Ä–∞–Ω–∏—Ü
func getSignalAtIndex(signals []internal.SignalType, index int) internal.SignalType {
	if index < 0 || index >= len(signals) {
		return internal.HOLD
	}
	return signals[index]
}

// countSignals ‚Äî –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–Ω—É–ª–µ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
func countSignals(signals []internal.SignalType) int {
	count := 0
	for _, signal := range signals {
		if signal != internal.HOLD {
			count++
		}
	}
	return count
}
