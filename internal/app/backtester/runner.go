package backtester

import (
	"fmt"
	"runtime"
	"strings"
	"sync"
	"time"

	"bt/internal"
)

// ParallelStrategyRunner ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
type ParallelStrategyRunner struct {
	debug bool
}

// NewParallelStrategyRunner ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è ParallelStrategyRunner
func NewParallelStrategyRunner(debug bool) *ParallelStrategyRunner {
	return &ParallelStrategyRunner{debug: debug}
}

// RunStrategy ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
func (r *ParallelStrategyRunner) RunStrategy(strategyName string, candles []internal.Candle) (*BenchmarkResult, error) {
	strategy := internal.GetStrategy(strategyName)
	if strategy == nil {
		return nil, fmt.Errorf("—Å—Ç—Ä–∞—Ç–µ–≥–∏—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", strategyName)
	}

	strategyStartTime := time.Now()

	if r.debug {
		fmt.Printf("üêõ DEBUG: –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ %s\n", strategyName)
	}

	// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
	config := strategy.OptimizeWithConfig(candles)
	signals := strategy.GenerateSignalsWithConfig(candles, config)
	result := internal.Backtest(candles, signals, 0.01) // 0.01 units –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

	executionTime := time.Since(strategyStartTime)

	return &BenchmarkResult{
		Name:           strategy.Name(),
		TotalProfit:    result.TotalProfit,
		TradeCount:     result.TradeCount,
		FinalPortfolio: result.FinalPortfolio,
		ExecutionTime:  executionTime,
	}, nil
}

// RunAllStrategies ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func (r *ParallelStrategyRunner) RunAllStrategies(candles []internal.Candle) ([]BenchmarkResult, error) {
	fmt.Println("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
	fmt.Printf("üî• –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ %d —è–¥—Ä–∞—Ö\n", runtime.NumCPU())

	startTime := time.Now()
	strategyNames := internal.GetStrategyNames()
	totalStrategies := len(strategyNames)

	if r.debug {
		fmt.Printf("üêõ DEBUG: –ù–∞–π–¥–µ–Ω–æ %d —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: %s\n",
			totalStrategies, strings.Join(strategyNames, ", "))
	}

	// –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	resultsChan := make(chan BenchmarkResult, totalStrategies)
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	for _, name := range strategyNames {
		wg.Add(1)

		go func(strategyName string) {
			defer wg.Done()

			if result, err := r.RunStrategy(strategyName, candles); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ %s: %v\n", strategyName, err)
				return
			} else {
				resultsChan <- *result
				fmt.Printf("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s (–ø—Ä–∏–±—ã–ª—å: %.2f%%, –≤—Ä–µ–º—è: %v)\n",
					result.Name, result.TotalProfit*100, result.ExecutionTime)
			}
		}(name)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	wg.Wait()
	close(resultsChan)

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	var results []BenchmarkResult
	completed := 0
	for result := range resultsChan {
		results = append(results, result)
		completed++

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
		if completed%5 == 0 || completed == totalStrategies {
			fmt.Printf("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %d/%d —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n", completed, totalStrategies)
		}
	}

	elapsed := time.Since(startTime)
	fmt.Printf("‚ö° –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ %v\n", elapsed)

	return results, nil
}

// SingleStrategyRunner ‚Äî —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –±–µ–Ω—á–º–∞—Ä–∫–æ–º
type SingleStrategyRunner struct {
	debug bool
}

// NewSingleStrategyRunner ‚Äî –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è SingleStrategyRunner
func NewSingleStrategyRunner(debug bool) *SingleStrategyRunner {
	return &SingleStrategyRunner{debug: debug}
}

// RunStrategy ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å Buy & Hold –±–µ–Ω—á–º–∞—Ä–∫–æ–º
func (r *SingleStrategyRunner) RunStrategy(strategyName string, candles []internal.Candle) (*BenchmarkResult, error) {
	strategy := internal.GetStrategy(strategyName)
	if strategy == nil {
		return nil, fmt.Errorf("—Å—Ç—Ä–∞—Ç–µ–≥–∏—è %s –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", strategyName)
	}

	fmt.Printf("üéØ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s\n", strategy.Name())

	startTime := time.Now()

	// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
	config := strategy.OptimizeWithConfig(candles)
	signals := strategy.GenerateSignalsWithConfig(candles, config)
	result := internal.Backtest(candles, signals, 0.01)

	executionTime := time.Since(startTime)

	mainResult := &BenchmarkResult{
		Name:           strategy.Name(),
		TotalProfit:    result.TotalProfit,
		TradeCount:     result.TradeCount,
		FinalPortfolio: result.FinalPortfolio,
		ExecutionTime:  executionTime,
	}

	// –ó–∞–ø—É—Å–∫ Buy & Hold –∫–∞–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞
	bnhStrategy := internal.GetStrategy("buy_and_hold")

	bnhConfig := bnhStrategy.DefaultConfig()
	bnhSignals := bnhStrategy.GenerateSignalsWithConfig(candles, bnhConfig)
	internal.Backtest(candles, bnhSignals, 0.01)

	fmt.Printf("‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ %v\n", executionTime)

	return mainResult, nil
}

// RunAllStrategies ‚Äî –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏)
func (r *SingleStrategyRunner) RunAllStrategies(candles []internal.Candle) ([]BenchmarkResult, error) {
	return nil, fmt.Errorf("SingleStrategyRunner –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
}
