// strategies/arima_strategy_improved.go ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è ARIMA
//
// –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –°:
// - –ü–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π ARIMA(p,d,q) –º–æ–¥–µ–ª–∏
// - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
// - –§–∏–ª—å—Ç—Ä–∞–º–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ç—Ä–µ–Ω–¥–∞
// - –í–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
// - –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä–æ–≥–æ–º —Å–∏–≥–Ω–∞–ª–æ–≤

package strategies

import (
	"bt/internal"
	"log"
	"math"
)

// ARIMAModel ‚Äî –º–æ–¥–µ–ª—å ARIMA
type ARIMAModelImproved struct {
	arOrder   int // –ø–æ—Ä—è–¥–æ–∫ –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–∏ (p)
	maOrder   int // –ø–æ—Ä—è–¥–æ–∫ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ (q)
	diffOrder int // –ø–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è (d)

	arCoeffs []float64 // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã AR
	maCoeffs []float64 // –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã MA
	constant float64   // –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏

	residuals []float64 // –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è MA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

	originalData []float64 // –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
}

// NewARIMAModelImproved —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å ARIMA
func NewARIMAModelImproved(arOrder, diffOrder, maOrder int) *ARIMAModelImproved {
	return &ARIMAModelImproved{
		arOrder:   arOrder,
		maOrder:   maOrder,
		diffOrder: diffOrder,
		arCoeffs:  make([]float64, arOrder),
		maCoeffs:  make([]float64, maOrder),
		residuals: make([]float64, 0),
	}
}

// difference –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—è–¥–∞
func (model *ARIMAModelImproved) difference(data []float64, order int) []float64 {
	if order == 0 {
		result := make([]float64, len(data))
		copy(result, data)
		return result
	}

	result := make([]float64, len(data))
	copy(result, data)

	for d := 0; d < order; d++ {
		for i := 1; i < len(result); i++ {
			result[i] = result[i] - result[i-1]
		}
		result = result[1:] // —É–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
	}

	return result
}

// undifference –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —à–∫–∞–ª–µ
func (model *ARIMAModelImproved) undifference(stationaryForecast float64, originalData []float64, order int) float64 {
	if order == 0 {
		return stationaryForecast
	}

	// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—è–¥–∞
	if len(originalData) < order {
		return originalData[len(originalData)-1] + stationaryForecast
	}

	// –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä—è–¥–∞
	result := stationaryForecast

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
	for d := order - 1; d >= 0; d-- {
		lastOriginalValue := originalData[len(originalData)-1-d]
		result = lastOriginalValue + result
	}

	return result
}

// train –æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å ARIMA –Ω–∞ –¥–∞–Ω–Ω—ã—Ö
func (model *ARIMAModelImproved) train(data []float64) {
	log.Printf("üß† –û–±—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π ARIMA(%d,%d,%d) –º–æ–¥–µ–ª–∏ –Ω–∞ %d –¥–∞–Ω–Ω—ã—Ö", model.arOrder, model.diffOrder, model.maOrder, len(data))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è
	model.originalData = make([]float64, len(data))
	copy(model.originalData, data)

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
	stationaryData := model.difference(data, model.diffOrder)

	if len(stationaryData) < model.arOrder+model.maOrder+1 {
		log.Printf("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è: %d < %d", len(stationaryData), model.arOrder+model.maOrder+1)
		return
	}

	// –û–±—É—á–∞–µ–º AR –º–æ–¥–µ–ª—å
	model.trainARModel(stationaryData)

	log.Printf("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è ARIMA –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞, AR –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: %v, –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞: %.6f", model.arCoeffs, model.constant)
}

// trainARModel –æ–±—É—á–∞–µ—Ç –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
func (model *ARIMAModelImproved) trainARModel(data []float64) {
	n := len(data)
	if n < model.arOrder+1 {
		return
	}

	// –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
	X := make([][]float64, n-model.arOrder)
	y := make([]float64, n-model.arOrder)

	for i := model.arOrder; i < n; i++ {
		// –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
		y[i-model.arOrder] = data[i]

		// –ü—Ä–∏–∑–Ω–∞–∫–∏ (–ª–∞–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
		X[i-model.arOrder] = make([]float64, model.arOrder+1)
		X[i-model.arOrder][0] = 1.0 // –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞

		for j := 1; j <= model.arOrder; j++ {
			X[i-model.arOrder][j] = data[i-j]
		}
	}

	// –†–µ—à–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Ä...rn false
	coeffs := model.solveNormalEquations(X, y)
	if len(coeffs) > 0 {
		model.constant = coeffs[0]
		for i := 0; i < model.arOrder && i+1 < len(coeffs); i++ {
			model.arCoeffs[i] = coeffs[i+1]
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
		model.checkOverfitting()
	}
}

// checkOverfitting –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
func (model *ARIMAModelImproved) checkOverfitting() {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AR –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–ø—Ä–∏–∑–Ω–∞–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è)
	maxCoeff := 0.0
	for _, coeff := range model.arCoeffs {
		if math.Abs(coeff) > maxCoeff {
			maxCoeff = math.Abs(coeff)
		}
	}

	// –ï—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç > 2.0, —ç—Ç–æ –º–æ–∂–µ—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
	if maxCoeff > 2.0 {
		log.Printf("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π AR –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç = %.3f", maxCoeff)

		// –£–º–µ–Ω—å—à–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
		factor := 2.0 / maxCoeff
		for i := range model.arCoeffs {
			model.arCoeffs[i] *= factor
		}
		model.constant *= factor
	}
}

// solveNormalEquations —Ä–µ—à–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
func (model *ARIMAModelImproved) solveNormalEquations(X [][]float64, y []float64) []float64 {
	if len(X) == 0 || len(X[0]) == 0 {
		return nil
	}

	n := len(X)
	p := len(X[0])

	// –í—ã—á–∏—Å–ª—è–µ–º X^T * X
	xtx := make([][]float64, p)
	for i := range xtx {
		xtx[i] = make([]float64, p)
	}

	for i := 0; i < n; i++ {
		for j := 0; j < p; j++ {
			for k := 0; k < p; k++ {
				xtx[j][k] += X[i][j] * X[i][k]
			}
		}
	}

	// –í—ã—á–∏—Å–ª—è–µ–º X^T * y
	xty := make([]float64, p)
	for i := 0; i < n; i++ {
		for j := 0; j < p; j++ {
			xty[j] += X[i][j] * y[i]
		}
	}

	// –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É —É—Ä–∞–≤–Ω–µ–Ω–∏–π X^T * X * coeffs = X^T * y
	coeffs := model.solveLinearSystem(xtx, xty)
	return coeffs
}

// solveLinearSystem —Ä–µ—à–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–∏–Ω–µ–π–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π Ax = b –º–µ—Ç–æ–¥–æ–º –ì–∞—É—Å—Å–∞
func (model *ARIMAModelImproved) solveLinearSystem(A [][]float64, b []float64) []float64 {
	n := len(A)
	if n == 0 || len(b) != n {
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –º–∞—Ç—Ä–∏—Ü—ã –∏ –≤–µ–∫—Ç–æ—Ä–∞
	aug := make([][]float64, n)
	for i := range aug {
		aug[i] = make([]float64, n+1)
		copy(aug[i][:n], A[i])
		aug[i][n] = b[i]
	}

	// –ü—Ä—è–º–æ–π —Ö–æ–¥ –º–µ—Ç–æ–¥–∞ –ì–∞—É—Å—Å–∞
	for i := 0; i < n; i++ {
		// –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ
		maxRow := i
		for k := i + 1; k < n; k++ {
			if math.Abs(aug[k][i]) > math.Abs(aug[maxRow][i]) {
				maxRow = k
			}
		}

		// –û–±–º–µ–Ω —Å—Ç—Ä–æ–∫
		aug[i], aug[maxRow] = aug[maxRow], aug[i]

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–æ—Å—Ç—å
		if math.Abs(aug[i][i]) < 1e-10 {
			return nil // –ú–∞—Ç—Ä–∏—Ü–∞ –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è
		}

		// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
		for j := i + 1; j <= n; j++ {
			aug[i][j] /= aug[i][i]
		}

		// –≠–ª–∏–º–∏–Ω–∞—Ü–∏—è
		for k := i + 1; k < n; k++ {
			factor := aug[k][i]
			for j := i + 1; j <= n; j++ {
				aug[k][j] -= factor * aug[i][j]
			}
		}
	}

	// –û–±—Ä–∞—Ç–Ω—ã–π —Ö–æ–¥
	x := make([]float64, n)
	for i := n - 1; i >= 0; i-- {
		x[i] = aug[i][n]
		for j := i + 1; j < n; j++ {
			x[i] -= aug[i][j] * x[j]
		}
	}

	return x
}

// forecast –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func (model *ARIMAModelImproved) forecast(data []float64) float64 {
	if len(data) < model.arOrder {
		return 0
	}

	// –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–≥–æ —Ä—è–¥–∞
	stationaryForecast := model.constant

	// AR –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
	for i := 0; i < model.arOrder; i++ {
		idx := len(data) - 1 - i
		if idx >= 0 {
			stationaryForecast += model.arCoeffs[i] * data[idx]
		}
	}

	// –û–±—Ä–∞—Ç–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π —à–∫–∞–ª–µ
	originalForecast := model.undifference(stationaryForecast, data, model.diffOrder)

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
	currentPrice := data[len(data)-1]
	maxChange := 0.5
	minPrice := currentPrice * 0.1
	maxPrice := currentPrice * (1.0 + maxChange)

	if originalForecast < minPrice {
		originalForecast = minPrice
	} else if originalForecast > maxPrice {
		originalForecast = maxPrice
	}

	return originalForecast
}

type ARIMAStrategyImproved struct{}

func (s *ARIMAStrategyImproved) Name() string {
	return "arima_strategy_improved"
}

func (s *ARIMAStrategyImproved) GenerateSignals(candles []internal.Candle, params internal.StrategyParams) []internal.SignalType {
	if len(candles) < 100 {
		log.Printf("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π ARIMA: –ø–æ–ª—É—á–µ–Ω–æ %d —Å–≤–µ—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 100", len(candles))
		return make([]internal.SignalType, len(candles))
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	prices := make([]float64, len(candles))
	for i, candle := range candles {
		prices[i] = candle.Close.ToFloat64()
	}

	// –£–õ–£–ß–®–ï–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´
	arOrder := 3   // AR(3) - —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
	diffOrder := 1 // I(1) - –ø–µ—Ä–≤–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ
	maOrder := 1   // MA(1) - –¥–æ–±–∞–≤–ª–µ–Ω–∞ MA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

	// –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
	windowSize := 300
	baseThreshold := 0.003 // 0.3% - —Å–Ω–∏–∂–µ–Ω–Ω—ã–π –±–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤

	log.Printf("üöÄ –ó–ê–ü–£–°–ö –£–õ–£–ß–®–ï–ù–ù–û–ô ARIMA –°–¢–†–ê–¢–ï–ì–ò–ò:")
	log.Printf("   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: AR(%d,%d,%d)", arOrder, diffOrder, maOrder)
	log.Printf("   –û–∫–Ω–æ –æ–±—É—á–µ–Ω–∏—è: %d —Å–≤–µ—á–µ–π", windowSize)
	log.Printf("   –ë–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥: %.2f%%", baseThreshold*100)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏
	signals := make([]internal.SignalType, len(candles))
	inPosition := false

	// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
	minTrainSize := windowSize + 50

	for i := minTrainSize; i < len(candles); i++ {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º rolling window –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
		windowStart := i - windowSize
		if windowStart < 0 {
			windowStart = 0
		}
		windowData := prices[windowStart:i]

		// –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –æ–∫–Ω–µ –¥–∞–Ω–Ω—ã—Ö
		model := NewARIMAModelImproved(arOrder, diffOrder, maOrder)
		model.train(windowData)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
		if !s.validateModel(model, windowData) {
			signals[i] = internal.HOLD
			continue
		}

		// –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		forecast := model.forecast(windowData)
		currentPrice := prices[i-1]

		// –í—ã—á–∏—Å–ª—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		volatility := s.calculateVolatility(prices[max(0, i-50):i])
		adaptiveThreshold := baseThreshold + volatility*0.5

		// –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–∞ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
		signal := s.generateEnhancedSignal(currentPrice, forecast, adaptiveThreshold, prices, i)

		// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ñ–∏–ª—å—Ç—Ä–æ–º —Ç—Ä–µ–Ω–¥–∞
		trendStrength := s.calculateTrendStrength(prices[max(0, i-20):i])

		// –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏–ª–µ —Ç—Ä–µ–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
		trendThreshold := 0.02 // –ë—ã–ª–æ 0.1

		if !inPosition && signal == internal.BUY && trendStrength > -trendThreshold {
			signals[i] = internal.BUY
			inPosition = true
		} else if inPosition && signal == internal.SELL && trendStrength < trendThreshold {
			signals[i] = internal.SELL
			inPosition = false
		} else {
			signals[i] = internal.HOLD
		}

		// –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 100 —Å–≤–µ—á–µ–π
		if i%100 == 0 {
			log.Printf("üß† –°–≤–µ—á–∞ %d: —Ü–µ–Ω–∞=%.2f, –ø—Ä–æ–≥–Ω–æ–∑=%.2f, —Ç—Ä–µ–Ω–¥=%.3f, –≤–æ–ª–∞—Ç=%.3f, –ø–æ—Ä–æ–≥=%.3f, —Å–∏–≥–Ω–∞–ª=%v",
				i, currentPrice, forecast, trendStrength, volatility, adaptiveThreshold, signal)
		}
	}

	log.Printf("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π ARIMA –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
	return signals
}

// validateModel –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
func (s *ARIMAStrategyImproved) validateModel(model *ARIMAModelImproved, data []float64) bool {
	if len(data) < 20 {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ (–ø—Ä–∏–∑–Ω–∞–∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è)
	maxCoeff := 0.0
	for _, coeff := range model.arCoeffs {
		if math.Abs(coeff) > maxCoeff {
			maxCoeff = math.Abs(coeff)
		}
	}

	// –ï—Å–ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ - –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞
	if maxCoeff > 3.0 {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Ä–∞–∑—É–º–Ω–∞—è
	if math.Abs(model.constant) > 1000 {
		return false
	}

	return true
}

// calculateVolatility —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
func (s *ARIMAStrategyImproved) calculateVolatility(prices []float64) float64 {
	if len(prices) < 10 {
		return 0.01 // –¥–µ—Ñ–æ–ª—Ç–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
	returns := make([]float64, len(prices)-1)
	for i := 1; i < len(prices); i++ {
		returns[i-1] = (prices[i] - prices[i-1]) / prices[i-1]
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
	mean := 0.0
	for _, ret := range returns {
		mean += ret
	}
	mean /= float64(len(returns))

	variance := 0.0
	for _, ret := range returns {
		variance += (ret - mean) * (ret - mean)
	}
	variance /= float64(len(returns))

	return math.Sqrt(variance)
}

// calculateTrendStrength —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞ —Å –ø–æ–º–æ—â—å—é –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
func (s *ARIMAStrategyImproved) calculateTrendStrength(prices []float64) float64 {
	if len(prices) < 10 {
		return 0.0
	}

	n := float64(len(prices))
	sumX := n * (n - 1) / 2
	sumY := 0.0
	sumXY := 0.0
	sumXX := n * (n - 1) * (2*n - 1) / 6

	for i, price := range prices {
		x := float64(i)
		sumY += price
		sumXY += x * price
	}

	// –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞ (slope)
	slope := (n*sumXY - sumX*sumY) / (n*sumXX - sumX*sumX)

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–ª—É —Ç—Ä–µ–Ω–¥–∞
	avgPrice := sumY / n
	trendStrength := slope / avgPrice

	return trendStrength
}

// generateEnhancedSignal –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Å —É—á–µ—Ç–æ–º —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
func (s *ARIMAStrategyImproved) generateEnhancedSignal(currentPrice, forecastPrice, threshold float64, prices []float64, currentIndex int) internal.SignalType {
	// –ë–∞–∑–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
	expectedChange := (forecastPrice - currentPrice) / currentPrice

	// –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
	volatility := s.calculateVolatility(prices[max(0, currentIndex-30):currentIndex])
	adaptiveThreshold := threshold + volatility*0.3

	// BUY: –æ–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç —Ü–µ–Ω—ã –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞
	if expectedChange > adaptiveThreshold {
		return internal.BUY
	}

	// SELL: –æ–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞
	if expectedChange < -adaptiveThreshold {
		return internal.SELL
	}

	return internal.HOLD
}

func (s *ARIMAStrategyImproved) Optimize(candles []internal.Candle) internal.StrategyParams {
	return internal.StrategyParams{}
}

func init() {
	internal.RegisterStrategy("arima_strategy", &ARIMAStrategyImproved{})
}
