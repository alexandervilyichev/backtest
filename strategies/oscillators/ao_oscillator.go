// strategies/awesome_oscillator.go
// –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ "–ß—É–¥–µ—Å–Ω—ã–π –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä" (Awesome Oscillator, AO) –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞.
//
// –û–ø–∏—Å–∞–Ω–∏–µ:
//   Awesome Oscillator (AO) ‚Äî –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –∏–∑–º–µ—Ä—è—é—â–∏–π –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏.
//   –û–Ω —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–∫–æ–ª—å–∑—è—â–∏–º–∏ —Å—Ä–µ–¥–Ω–∏–º–∏ (SMA)
//   –º–µ–¥–∏–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã (High + Low) / 2:
//
//     AO(t) = SMA(MedianPrice, 5) - SMA(MedianPrice, 34)
//
//   –ì–¥–µ:
//     - MedianPrice = (High + Low) / 2 ‚Äî –ª—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞ "–∏—Å—Ç–∏–Ω–Ω–æ–π" —Ü–µ–Ω—ã –∑–∞ —Å–≤–µ—á—É.
//     - 5 ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥ (—Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ –∏–º–ø—É–ª—å—Å—ã).
//     - 34 ‚Äî –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–æ—Ç—Ä–∞–∂–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–¥).
//
//   –ó–Ω–∞—á–µ–Ω–∏–µ AO:
//     - AO > 0: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –≤—ã—à–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π ‚Üí –≤–æ—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å.
//     - AO < 0: –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∏–∂–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π ‚Üí –Ω–∏—Å—Ö–æ–¥—è—â–∏–π –∏–º–ø—É–ª—å—Å.
//
//   –¢–æ—Ä–≥–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞:
//     - –ü–æ–∫—É–ø–∫–∞ (BUY): AO –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –Ω–æ–ª—å —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö (AO[i-1] < 0 && AO[i] >= 0)
//       –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ‚Äî –∑–µ–ª—ë–Ω–∞—è (Close > Open).
//     - –ü—Ä–æ–¥–∞–∂–∞ (SELL): AO –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç –Ω–æ–ª—å —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑ (AO[i-1] > 0 && AO[i] <= 0)
//       –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–≤–µ—á–∞ ‚Äî –∫—Ä–∞—Å–Ω–∞—è (Close < Open).
//
//   –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ "–¥–≤—É–º—è —Å–≤–µ—á–∞–º–∏":
//     - –î–ª—è BUY: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Ç–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å).
//     - –î–ª—è SELL: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–µ –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–∞–¥–∞—Ç—å.
//
//   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ AO: –æ–Ω —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –æ–±—ä–µ–º–∞ –∏ —Å–∏–ª—ã –¥–≤–∏–∂–µ–Ω–∏—è,
//   –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —à—É–º, –∫–∞–∫ RSI –∏–ª–∏ MACD, –∏ –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö M15-H1.

package oscillators

import (
	"bt/internal"
	"fmt"
	"log"
)

// AwesomeOscillatorStrategy —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ß—É–¥–µ—Å–Ω–æ–≥–æ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–∞ –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞.
type AwesomeOscillatorStrategy struct{}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
func (s *AwesomeOscillatorStrategy) Name() string {
	return "awesome_oscillator"
}

// calculateMedianPrice –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–¥–∏–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è –æ–¥–Ω–æ–π —Å–≤–µ—á–∏: (High + Low) / 2
func calculateMedianPrice(c internal.Candle) float64 {
	h := c.High.ToFloat64()
	l := c.Low.ToFloat64()
	return (h + l) / 2.0
}

// calculateAO –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è Awesome Oscillator –¥–ª—è –º–∞—Å—Å–∏–≤–∞ —Å–≤–µ—á–µ–π.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ä–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π AO, –≥–¥–µ –∏–Ω–¥–µ–∫—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å—É —Å–≤–µ—á–∏.
// –ü–µ—Ä–≤—ã–µ slowPeriod –∑–Ω–∞—á–µ–Ω–∏–π –±—É–¥—É—Ç 0 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö).
func calculateAO(candles []internal.Candle, fastPeriod, slowPeriod int) []float64 {
	if len(candles) < slowPeriod {
		log.Printf("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ AO (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º %d —Å–≤–µ—á–µ–π)", slowPeriod)
		return nil
	}

	ao := make([]float64, len(candles))

	// –í—ã—á–∏—Å–ª—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
	medians := make([]float64, len(candles))
	for i := range candles {
		medians[i] = calculateMedianPrice(candles[i])
	}

	// –í—ã—á–∏—Å–ª—è–µ–º SMA –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
	smaFast := make([]float64, len(candles))
	smaSlow := make([]float64, len(candles))

	// –†–∞—Å—á–µ—Ç SMA (–ø—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)
	for i := 0; i < len(candles); i++ {
		if i < fastPeriod-1 {
			smaFast[i] = 0
		} else {
			var sum float64
			for j := i - fastPeriod + 1; j <= i; j++ {
				sum += medians[j]
			}
			smaFast[i] = sum / float64(fastPeriod)
		}

		if i < slowPeriod-1 {
			smaSlow[i] = 0
		} else {
			var sum float64
			for j := i - slowPeriod + 1; j <= i; j++ {
				sum += medians[j]
			}
			smaSlow[i] = sum / float64(slowPeriod)
		}
	}

	// AO = SMA_fast - SMA_slow
	for i := 0; i < len(candles); i++ {
		if smaFast[i] == 0 || smaSlow[i] == 0 {
			ao[i] = 0
		} else {
			ao[i] = smaFast[i] - smaSlow[i]
		}
	}

	return ao
}

// GenerateSignals –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ AO.
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
//   - params.AoFastPeriod ‚Äî –ø–µ—Ä–∏–æ–¥ –±—ã—Å—Ç—Ä–æ–π SMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
//   - params.AoSlowPeriod ‚Äî –ø–µ—Ä–∏–æ–¥ –º–µ–¥–ª–µ–Ω–Ω–æ–π SMA (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 34)
//   - params.AoConfirmByTwoCandles ‚Äî –µ—Å–ª–∏ true, —Ç—Ä–µ–±—É–µ—Ç –¥–≤—É—Ö –ø–æ–¥—Ä—è–¥ —Ä–∞—Å—Ç—É—â–∏—Ö/–ø–∞–¥–∞—é—â–∏—Ö –º–µ–¥–∏–∞–Ω–Ω—ã—Ö —Ü–µ–Ω
//
// –õ–æ–≥–∏–∫–∞:
//   - BUY: AO[i-1] < 0 && AO[i] >= 0 –∏ Close[i] > Open[i] (–∑–µ–ª—ë–Ω–∞—è —Å–≤–µ—á–∞)
//   - SELL: AO[i-1] > 0 && AO[i] <= 0 –∏ Close[i] < Open[i] (–∫—Ä–∞—Å–Ω–∞—è —Å–≤–µ—á–∞)
//
// –ï—Å–ª–∏ AoConfirmByTwoCandles == true:
//   - –î–ª—è BUY: —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã i-1 –∏ i –±–æ–ª—å—à–µ, —á–µ–º i-2
//   - –î–ª—è SELL: —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã i-1 –∏ i –º–µ–Ω—å—à–µ, —á–µ–º i-2
//
// –≠—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –ø—Ä–∏ —Ñ–ª–µ—Ç–µ.
func (s *AwesomeOscillatorStrategy) GenerateSignals(candles []internal.Candle, params internal.StrategyParams) []internal.SignalType {
	fastPeriod := params.AoFastPeriod
	if fastPeriod == 0 {
		fastPeriod = 5 // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞
	}

	slowPeriod := params.AoSlowPeriod
	if slowPeriod == 0 {
		slowPeriod = 34 // —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ë–∏–ª–ª–∞ –í–∏–ª—å—è–º—Å–∞
	}

	confirmByTwo := params.AoConfirmByTwoCandles

	aoValues := calculateAO(candles, fastPeriod, slowPeriod)
	if aoValues == nil {
		log.Println("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å AO ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–∏–≥–Ω–∞–ª—ã")
		return make([]internal.SignalType, len(candles))
	}

	signals := make([]internal.SignalType, len(candles))
	inPosition := false

	// –ù–∞—á–∏–Ω–∞–µ–º —Å slowPeriod, —Ç–∞–∫ –∫–∞–∫ –¥–æ —ç—Ç–æ–≥–æ AO –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω
	for i := slowPeriod; i < len(candles); i++ {
		prevAo := aoValues[i-1]
		currAo := aoValues[i]

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω—É–ª—è
		isBuySignal := prevAo < 0 && currAo >= 0
		isSellSignal := prevAo > 0 && currAo <= 0

		// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–≤–µ—á–∞–º–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ –±—É–¥—É—â–µ–º)
		// currOpen := candles[i].Open.ToFloat64()
		// currClose := candles[i].Close.ToFloat64()
		// isGreenCandle := currClose > currOpen
		// isRedCandle := currClose < currOpen

		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–≤—É–º—è —Å–≤–µ—á–∞–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
		confirmCondition := true
		if confirmByTwo && i >= 2 {
			medPrev2 := calculateMedianPrice(candles[i-2])
			medPrev1 := calculateMedianPrice(candles[i-1])
			medCurr := calculateMedianPrice(candles[i])

			if isBuySignal {
				// –î–≤–µ –ø–æ–¥—Ä—è–¥ —Ä–∞—Å—Ç—É—â–∏–µ –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
				confirmCondition = medPrev1 > medPrev2 && medCurr > medPrev1
			} else if isSellSignal {
				// –î–≤–µ –ø–æ–¥—Ä—è–¥ –ø–∞–¥–∞—é—â–∏–µ –º–µ–¥–∏–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã
				confirmCondition = medPrev1 < medPrev2 && medCurr < medPrev1
			}
		}

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –Ω—É–ª—è)
		if isBuySignal && confirmCondition && !inPosition {
			signals[i] = internal.BUY
			inPosition = true
			continue
		}

		if isSellSignal && confirmCondition && inPosition {
			signals[i] = internal.SELL
			inPosition = false
			continue
		}

		signals[i] = internal.HOLD
	}

	return signals
}

// Optimize –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
//
// Grid search –ø–æ:
//   - fastPeriod: [3, 5, 7]
//   - slowPeriod: [21, 34, 55] ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏
//   - confirmByTwoCandles: true/false
//
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ç–∫—Ç–µ—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª—å—é.
func (s *AwesomeOscillatorStrategy) Optimize(candles []internal.Candle) internal.StrategyParams {
	bestParams := internal.StrategyParams{
		AoFastPeriod:          5,
		AoSlowPeriod:          34,
		AoConfirmByTwoCandles: false,
	}
	bestProfit := -1.0

	generator := s.GenerateSignals

	// –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	fastOptions := []int{3, 5, 7}
	slowOptions := []int{21, 34, 55}
	confirmOptions := []bool{false, true}

	for _, fast := range fastOptions {
		for _, slow := range slowOptions {
			// –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä—ã
			if fast >= slow {
				continue
			}
			for _, confirm := range confirmOptions {
				params := internal.StrategyParams{
					AoFastPeriod:          fast,
					AoSlowPeriod:          slow,
					AoConfirmByTwoCandles: confirm,
				}

				signals := generator(candles, params)
				result := internal.Backtest(candles, signals, 0.01) // 0.01 units –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

				if result.TotalProfit > bestProfit {
					bestProfit = result.TotalProfit
					bestParams = params
				}
			}
		}
	}

	// –£–±–∏—Ä–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
	fmt.Printf("üîç –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã AO: fast=%d, slow=%d, confirmTwo=%t ‚Üí –ø—Ä–∏–±—ã–ª—å=%.2f%%\n",
		bestParams.AoFastPeriod, bestParams.AoSlowPeriod, bestParams.AoConfirmByTwoCandles, bestProfit*100)

	return bestParams
}

// init —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ —Ñ–∞–±—Ä–∏–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
func init() {
	internal.RegisterStrategy("awesome_oscillator", &AwesomeOscillatorStrategy{})
}
