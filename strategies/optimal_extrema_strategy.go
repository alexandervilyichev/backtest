// strategies/optimal_extrema_strategy.go ‚Äî —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —Ç–æ—á–µ–∫ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏
//
// –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
// –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä—ã —Ç–æ—á–µ–∫ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤.
// –ê–ª–≥–æ—Ä–∏—Ç–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º–µ–∂–¥—É —Ç–æ—á–∫–æ–π –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ—Ç –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫.
//
// –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:
// 1. –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã (—Ç–æ—á–∫–∏ –ø–æ–∫—É–ø–∫–∏) –∏ –º–∞–∫—Å–∏–º—É–º—ã (—Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏)
// 2. –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
// 3. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏
// 4. –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
//
// –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–∞:
// - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
// - –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
// - –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
// - –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
//
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
// - –ù–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∞–ª–≥–æ—Ä–∏—Ç–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω)

package strategies

import (
	"bt/internal"
	"log"
)

// OptimalExtremaPoint –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É —ç–∫—Å—Ç—Ä–µ–º—É–º–∞
type OptimalExtremaPoint struct {
	Index int     // –∏–Ω–¥–µ–∫—Å —Å–≤–µ—á–∏
	Price float64 // —Ü–µ–Ω–∞ (Low –¥–ª—è –º–∏–Ω–∏–º—É–º–∞, High –¥–ª—è –º–∞–∫—Å–∏–º—É–º–∞)
	IsBuy bool    // true –¥–ª—è —Ç–æ—á–∫–∏ –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω–∏–º—É–º), false –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ (–º–∞–∫—Å–∏–º—É–º)
}

// OptimalExtremaStrategy —Ä–µ–∞–ª–∏–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —Ç–æ—á–µ–∫
type OptimalExtremaStrategy struct{}

func (s *OptimalExtremaStrategy) Name() string {
	return "optimal_extrema_strategy"
}

// findPotentialExtrema –Ω–∞—Ö–æ–¥–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã
func (s *OptimalExtremaStrategy) findPotentialExtrema(candles []internal.Candle) ([]OptimalExtremaPoint, []OptimalExtremaPoint) {
	var potentialMinima []OptimalExtremaPoint
	var potentialMaxima []OptimalExtremaPoint

	// –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
	for i := 1; i < len(candles)-1; i++ {
		currentLow := candles[i].Low.ToFloat64()
		currentHigh := candles[i].High.ToFloat64()
		prevLow := candles[i-1].Low.ToFloat64()
		prevHigh := candles[i-1].High.ToFloat64()
		nextLow := candles[i+1].Low.ToFloat64()
		nextHigh := candles[i+1].High.ToFloat64()

		// –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∏–Ω–∏–º—É–º (—Ç–æ—á–∫–∞ –ø–æ–∫—É–ø–∫–∏)
		if currentLow < prevLow && currentLow < nextLow {
			potentialMinima = append(potentialMinima, OptimalExtremaPoint{
				Index: i,
				Price: currentLow,
				IsBuy: true,
			})
		}

		// –õ–æ–∫–∞–ª—å–Ω—ã–π –º–∞–∫—Å–∏–º—É–º (—Ç–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂–∏)
		if currentHigh > prevHigh && currentHigh > nextHigh {
			potentialMaxima = append(potentialMaxima, OptimalExtremaPoint{
				Index: i,
				Price: currentHigh,
				IsBuy: false,
			})
		}
	}

	return potentialMinima, potentialMaxima
}

// createAlternatingSequence —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–¥—É—é—â–∏—Ö—Å—è —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
func (s *OptimalExtremaStrategy) createAlternatingSequence(minima, maxima []OptimalExtremaPoint) []OptimalExtremaPoint {
	var sequence []OptimalExtremaPoint

	// –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω–∞—á–∞–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	minIdx := 0
	maxIdx := 0

	// –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –º–∏–Ω–∏–º—É–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω—å—à–µ –ø–µ—Ä–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞
	if len(minima) > 0 && len(maxima) > 0 {
		if minima[0].Index < maxima[0].Index {
			sequence = append(sequence, minima[0])
			minIdx = 1
		}
	} else if len(minima) > 0 {
		sequence = append(sequence, minima[0])
		minIdx = 1
	}

	// –ß–µ—Ä–µ–¥—É–µ–º –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
	for len(sequence) > 0 {
		lastIsBuy := sequence[len(sequence)-1].IsBuy

		if lastIsBuy {
			// –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ã–ª –º–∏–Ω–∏–º—É–º, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∞–∫—Å–∏–º—É–º
			found := false
			for maxIdx < len(maxima) {
				if maxima[maxIdx].Index > sequence[len(sequence)-1].Index {
					sequence = append(sequence, maxima[maxIdx])
					maxIdx++
					found = true
					break
				}
				maxIdx++
			}
			if !found {
				break
			}
		} else {
			// –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ã–ª –º–∞–∫—Å–∏–º—É–º, –∏—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–∏–Ω–∏–º—É–º
			found := false
			for minIdx < len(minima) {
				if minima[minIdx].Index > sequence[len(sequence)-1].Index {
					sequence = append(sequence, minima[minIdx])
					minIdx++
					found = true
					break
				}
				minIdx++
			}
			if !found {
				break
			}
		}
	}

	return sequence
}

// validateOptimalInterval –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –ø–∞—Ä–æ–π —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
func (s *OptimalExtremaStrategy) validateOptimalInterval(candles []internal.Candle, buyPoint, sellPoint OptimalExtremaPoint) bool {
	buyIndex := buyPoint.Index
	sellIndex := sellPoint.Index

	if buyIndex >= sellIndex {
		return false
	}

	buyPrice := buyPoint.Price

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç —Ü–µ–Ω –Ω–∏–∂–µ —Ç–æ—á–∫–∏ –ø–æ–∫—É–ø–∫–∏
	for i := buyIndex; i <= sellIndex; i++ {
		if candles[i].Low.ToFloat64() < buyPrice {
			return false
		}
	}

	sellPrice := sellPoint.Price

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –Ω–µ—Ç —Ü–µ–Ω –≤—ã—à–µ —Ç–æ—á–∫–∏ –ø—Ä–æ–¥–∞–∂–∏
	for i := buyIndex; i <= sellIndex; i++ {
		if candles[i].High.ToFloat64() > sellPrice {
			return false
		}
	}

	return true
}

// removeOverlapsAndDuplicates —É–¥–∞–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –∏ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
func (s *OptimalExtremaStrategy) removeOverlapsAndDuplicates(pairs []OptimalExtremaPoint) []OptimalExtremaPoint {
	if len(pairs) < 2 {
		return pairs
	}

	var filtered []OptimalExtremaPoint
	var lastSellIndex = -1

	for _, point := range pairs {
		if point.IsBuy {
			// –¢–æ—á–∫–∞ –ø–æ–∫—É–ø–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–¥–∞–∂–∏
			if point.Index > lastSellIndex {
				filtered = append(filtered, point)
			}
		} else {
			// –¢–æ—á–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ - –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º lastSellIndex
			filtered = append(filtered, point)
			lastSellIndex = point.Index
		}
	}

	return filtered
}

// GenerateSignals –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
func (s *OptimalExtremaStrategy) GenerateSignals(candles []internal.Candle, params internal.StrategyParams) []internal.SignalType {
	// –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	if len(candles) < 3 {
		log.Printf("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: –ø–æ–ª—É—á–µ–Ω–æ %d —Å–≤–µ—á–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 3", len(candles))
		return make([]internal.SignalType, len(candles))
	}

	// –®–∞–≥ 2: –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
	potentialMinima, potentialMaxima := s.findPotentialExtrema(candles)

	log.Printf("üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤: %d, –º–∞–∫—Å–∏–º—É–º–æ–≤: %d", len(potentialMinima), len(potentialMaxima))

	// –®–∞–≥ 3: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤
	sequence := s.createAlternatingSequence(potentialMinima, potentialMaxima)

	// –£–¥–∞–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ (–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π —ç–∫—Å—Ç—Ä–µ–º—É–º - –º–∞–∫—Å–∏–º—É–º)
	if len(sequence) > 0 && !sequence[0].IsBuy {
		sequence = sequence[1:]
	}

	log.Printf("üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ %d —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤", len(sequence))

	// –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
	var optimalPairs []OptimalExtremaPoint
	for i := 0; i < len(sequence)-1; i++ {
		if sequence[i].IsBuy && !sequence[i+1].IsBuy {
			// –ü–∞—Ä–∞: –ø–æ–∫—É–ø–∫–∞ -> –ø—Ä–æ–¥–∞–∂–∞
			if s.validateOptimalInterval(candles, sequence[i], sequence[i+1]) {
				optimalPairs = append(optimalPairs, sequence[i], sequence[i+1])
			}
		}
	}

	log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä (–ø–æ–∫—É–ø–∫–∞ -> –ø—Ä–æ–¥–∞–∂–∞)", len(optimalPairs)/2)

	// –®–∞–≥ 5: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π –∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
	optimalPairs = s.removeOverlapsAndDuplicates(optimalPairs)

	// –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
	signals := make([]internal.SignalType, len(candles))

	for i := 0; i < len(optimalPairs); i += 2 {
		if i+1 < len(optimalPairs) {
			buyIndex := optimalPairs[i].Index
			sellIndex := optimalPairs[i+1].Index

			if buyIndex < len(signals) && sellIndex < len(signals) {
				signals[buyIndex] = internal.BUY
				signals[sellIndex] = internal.SELL
			}
		}
	}

	// –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	buyCount := 0
	sellCount := 0
	for _, signal := range signals {
		if signal == internal.BUY {
			buyCount++
		} else if signal == internal.SELL {
			sellCount++
		}
	}

	log.Printf("üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: BUY=%d, SELL=%d", buyCount, sellCount)

	return signals
}

// Optimize –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è)
func (s *OptimalExtremaStrategy) Optimize(candles []internal.Candle) internal.StrategyParams {
	log.Printf("üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è optimal_extrema_strategy (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è)")
	return internal.StrategyParams{}
}

func init() {
	internal.RegisterStrategy("optimal_extrema_strategy", &OptimalExtremaStrategy{})
}
