// main.go ‚Äî –°–±–æ—Ä —Å–≤–µ—á–µ–π Tinkoff API: –ø–æ –º–µ—Å—è—Ü–∞–º, —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
package main

import (
	"bt/internal"
	"bytes"
	"context"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

const (
	API_TOKEN     = "NEW_TOKEN"
	INSTRUMENT_ID = "TCS60A101X76"
	INTERVAL      = "CANDLE_INTERVAL_30_MIN"
	LIMIT         = 1000
	API_ENDPOINT  = "https://invest-public-api.tbank.ru/rest/tinkoff.public.invest.api.contract.v1.MarketDataService/GetCandles"
	OUTPUT_FILE   = "tmos_big.json"
	MONTH_STEP    = 30 * 24 * time.Hour // ~1 –º–µ—Å—è—Ü (–±–µ–∑ —É—á—ë—Ç–∞ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
)

var client = &http.Client{
	Timeout: 15 * time.Second,
	Transport: &http.Transport{
		TLSClientConfig: &tls.Config{
			InsecureSkipVerify: true, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
		},
	},
}

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ —Å–≤–µ—á–µ–π Tinkoff Invest (–º–µ—Å—è—á–Ω—ã–µ –±–ª–æ–∫–∏ + –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ)")

	// –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
	toTime := time.Now().UTC()
	var allCandles []internal.Candle
	daysSkipped := 0

	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	if err := loadExistingCandles(&allCandles); err != nil {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ %s: %v", OUTPUT_FILE, err)
	} else {
		log.Printf("üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–≤–µ—á–µ–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞", len(allCandles))
	}

	for {
		fromTime := toTime.Add(-MONTH_STEP)

		reqBody := internal.RequestBody{
			From:             fromTime.Format(time.RFC3339),
			To:               toTime.Format(time.RFC3339),
			Interval:         INTERVAL,
			InstrumentId:     INSTRUMENT_ID,
			CandleSourceType: "CANDLE_SOURCE_UNSPECIFIED",
			Limit:            LIMIT,
		}

		jsonBody, err := json.Marshal(reqBody)
		if err != nil {
			log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}

		req, err := http.NewRequestWithContext(context.Background(), "POST", API_ENDPOINT, bytes.NewBuffer(jsonBody))
		if err != nil {
			log.Fatal("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:", err)
		}

		req.Header.Set("Content-Type", "application/json")
		req.Header.Set("Accept", "application/json")
		req.Header.Set("Authorization", "Bearer "+API_TOKEN)

		log.Printf("üì• –ó–∞–ø—Ä–æ—Å: from=%s, to=%s, limit=%d", reqBody.From, reqBody.To, reqBody.Limit)

		resp, err := client.Do(req)
		if err != nil {
			log.Printf("‚ùå HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: %v", err)
			log.Println("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
			saveCandlesToFile(allCandles)
			log.Fatal("üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏")
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
			log.Println("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
			saveCandlesToFile(allCandles)
			log.Fatal("üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
		}

		if resp.StatusCode != 200 {
			log.Printf("‚ö†Ô∏è HTTP %d: %s", resp.StatusCode, string(body))
			if strings.Contains(string(body), "not found") || strings.Contains(string(body), "no data") {
				log.Println("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–±–æ—Ä")
				break
			}
			log.Printf("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %d ‚Äî –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...", resp.StatusCode)
			// –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–±–æ–π
			toTime = fromTime
			time.Sleep(2 * time.Second)
			continue
		}

		var response internal.GetCandlesResponse
		if err := json.Unmarshal(body, &response); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
			log.Println("üíæ –°–æ—Ö—Ä–∞–Ω—è—é –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
			saveCandlesToFile(allCandles)
			log.Fatal("üõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞")
		}

		candles := response.Candles

		if len(candles) == 0 {
			daysSkipped++
			log.Printf("‚ÑπÔ∏è –ú–µ—Å—è—Ü %s‚Äì%s: 0 —Å–≤–µ—á–µ–π (–≤—ã—Ö–æ–¥–Ω—ã–µ/–ø—Ä–∞–∑–¥–Ω–∏–∫–∏?) ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ (%d –≤—Å–µ–≥–æ)",
				fromTime.Format("2006-01"), toTime.Format("2006-01"), daysSkipped)
			toTime = fromTime
			time.Sleep(100 * time.Millisecond)
			continue
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—á–∏ –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (—Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫: —Å—Ç–∞—Ä—ã–µ ‚Üí –Ω–æ–≤—ã–µ)
		allCandles = append(candles, allCandles...)
		processedCount := len(allCandles)

		// üö® –ö–õ–Æ–ß–ï–í–û–ô –®–ê–ì: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–Å –≤ —Ñ–∞–π–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
		saveCandlesToFile(allCandles)

		// –°–¥–≤–∏–≥–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –Ω–∞ —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é —Å–≤–µ—á—É
		oldestCandleTime, err := time.Parse(time.RFC3339, candles[0].Time)
		if err != nil {
			log.Fatal("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π —Å–≤–µ—á–∏:", candles[0].Time)
		}
		toTime = oldestCandleTime

		log.Printf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %d —Å–≤–µ—á–µ–π (–≤—Å–µ–≥–æ: %d). –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –¥–æ %s",
			len(candles), processedCount, toTime.Format("2006-01-02"))

		// –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
		if processedCount > 500000 {
			log.Println("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 500k —Å–≤–µ—á–µ–π ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã")
			break
		}

		time.Sleep(100 * time.Millisecond)
	}

	log.Printf("üéâ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å–≤–µ—á–µ–π –≤ —Ñ–∞–π–ª %s", len(allCandles), OUTPUT_FILE)
}

// saveCandlesToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤–µ—á–∏ –≤ JSON-—Ñ–∞–π–ª
func saveCandlesToFile(candles []internal.Candle) error {
	outputData := struct {
		Candles []internal.Candle `json:"candles"`
	}{
		Candles: candles,
	}

	outputJSON, err := json.MarshalIndent(outputData, "", "  ")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏: %w", err)
	}

	if err := os.WriteFile(OUTPUT_FILE, outputJSON, 0644); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: %w", err)
	}

	log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —Å–≤–µ—á–µ–π –≤ %s", len(candles), OUTPUT_FILE)
	return nil
}

// loadExistingCandles –∑–∞–≥—Ä—É–∂–∞–µ—Ç —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –∏–∑ —Ñ–∞–π–ª–∞
func loadExistingCandles(candles *[]internal.Candle) error {
	data, err := os.ReadFile(OUTPUT_FILE)
	if err != nil {
		return err
	}

	var wrapper struct {
		Candles []internal.Candle `json:"candles"`
	}

	if err := json.Unmarshal(data, &wrapper); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}

	*candles = wrapper.Candles
	return nil
}
