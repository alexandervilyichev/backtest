// main.go
package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"runtime"
	"sort"
	"strings"
	"sync"
	"time"

	"bt/internal"
	_ "bt/strategies" // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
)

func LoadCandlesFromFile(filename string) []internal.Candle {
	data, err := os.ReadFile(filename)
	if err != nil {
		log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:", err)
	}

	var wrapper struct {
		Candles []internal.Candle `json:"candles"`
	}

	err = json.Unmarshal(data, &wrapper)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
	}

	sort.Slice(wrapper.Candles, func(i, j int) bool {
		return wrapper.Candles[i].ToTime().Before(wrapper.Candles[j].ToTime())
	})

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–≤–µ—á–µ–π –∏–∑ %s\n", len(wrapper.Candles), filename)
	return wrapper.Candles
}

// BenchmarkResult ‚Äî –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
type BenchmarkResult struct {
	Name           string
	TotalProfit    float64
	TradeCount     int
	FinalPortfolio float64
	ExecutionTime  time.Duration
}

func main() {
	filename := flag.String("file", "C:/Users/alexa/OneDrive/–î–æ–∫—É–º–µ–Ω—Ç—ã/Projects/backtest/candles.json", "–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–æ —Å–≤–µ—á–∞–º–∏")
	strategyName := flag.String("strategy", "all", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: all (–≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏) –∏–ª–∏ "+strings.Join(internal.GetStrategyNames(), ", "))
	flag.Parse()

	candles := LoadCandlesFromFile(*filename)
	if len(candles) == 0 {
		log.Fatal("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	}

	var results []BenchmarkResult

	// –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è "all" –∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ
	if *strategyName == "all" {
		fmt.Println("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
		fmt.Printf("üî• –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ %d —è–¥—Ä–∞—Ö\n", runtime.NumCPU())

		startTime := time.Now()

		strategyNames := internal.GetStrategyNames()
		totalStrategies := len(strategyNames)

		// –ö–∞–Ω–∞–ª –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
		resultsChan := make(chan BenchmarkResult, totalStrategies)

		// WaitGroup –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≥–æ—Ä—É—Ç–∏–Ω
		var wg sync.WaitGroup

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
		for _, name := range strategyNames {
			wg.Add(1)

			go func(strategyName string) {
				defer wg.Done()

				strategy := internal.GetStrategy(strategyName)
				strategyStartTime := time.Now()

				fmt.Printf("üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s\n", strategy.Name())

				// –û–±—É—á–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
				params := strategy.Optimize(candles)
				signals := strategy.GenerateSignals(candles, params)
				result := internal.Backtest(candles, signals, 0.01) // 0.01 units –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

				executionTime := time.Since(strategyStartTime)

				resultsChan <- BenchmarkResult{
					Name:           strategy.Name(),
					TotalProfit:    result.TotalProfit,
					TradeCount:     result.TradeCount,
					FinalPortfolio: result.FinalPortfolio,
					ExecutionTime:  executionTime,
				}

				fmt.Printf("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s (–ø—Ä–∏–±—ã–ª—å: %.2f%%, –≤—Ä–µ–º—è: %v)\n",
					strategy.Name(), result.TotalProfit*100, executionTime)
			}(name)
		}

		// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
		wg.Wait()

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
		close(resultsChan)

		// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		completed := 0
		for result := range resultsChan {
			results = append(results, result)
			completed++

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
			if completed%5 == 0 || completed == totalStrategies {
				fmt.Printf("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: %d/%d —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n", completed, totalStrategies)
			}
		}

		elapsed := time.Since(startTime)
		fmt.Printf("‚ö° –í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ %v\n", elapsed)
	} else {
		// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é

		mainStrategy := internal.GetStrategy(*strategyName)
		fmt.Printf("üéØ –í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: %s\n", mainStrategy.Name())

		mainStartTime := time.Now()

		// –û–±—É—á–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
		mainParams := mainStrategy.Optimize(candles)
		mainSignals := mainStrategy.GenerateSignals(candles, mainParams)

		// fmt.Printf("–ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è\n")
		// mainParams.QuantizationEnabled = true
		// candles = strategies.ApplyQuantizationToCandles(candles, mainParams)

		mainResult := internal.Backtest(candles, mainSignals, 0.01) // 0.01 units –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ

		mainExecutionTime := time.Since(mainStartTime)

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º Buy & Hold –∫–∞–∫ –±–µ–Ω—á–º–∞—Ä–∫
		bnhStrategy := internal.GetStrategy("buy_and_hold")
		bnhStartTime := time.Now()
		bnhSignals := bnhStrategy.GenerateSignals(candles, internal.StrategyParams{})
		bnhResult := internal.Backtest(candles, bnhSignals, 0.01) // 0.01 units –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
		bnhExecutionTime := time.Since(bnhStartTime)

		// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
		results = []BenchmarkResult{
			{
				Name:           mainStrategy.Name(),
				TotalProfit:    mainResult.TotalProfit,
				TradeCount:     mainResult.TradeCount,
				FinalPortfolio: mainResult.FinalPortfolio,
				ExecutionTime:  mainExecutionTime,
			},
			{
				Name:           bnhStrategy.Name(),
				TotalProfit:    bnhResult.TotalProfit,
				TradeCount:     bnhResult.TradeCount,
				FinalPortfolio: bnhResult.FinalPortfolio,
				ExecutionTime:  bnhExecutionTime,
			},
		}

		fmt.Printf("‚ö° –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ %v\n", mainExecutionTime+bnhExecutionTime)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–ª—É—á—à–∏–µ –≤–≤–µ—Ä—Ö—É)
	sort.Slice(results, func(i, j int) bool {
		return results[i].TotalProfit > results[j].TotalProfit
	})

	// –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
	fmt.Println("\n" + strings.Repeat("=", 100))
	fmt.Println("üìä –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–†–ê–¢–ï–ì–ò–ô")
	fmt.Println(strings.Repeat("=", 100))
	fmt.Printf("%-18s %-12s %-10s %-15s %-10s %-12s\n", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è", "–ü—Ä–∏–±—ã–ª—å", "–°–¥–µ–ª–∫–∏", "–§–∏–Ω–∞–ª, $", "–í—Ä–µ–º—è", "–†–∞–Ω–≥")
	fmt.Println(strings.Repeat("-", 100))

	rank := 1
	for i, r := range results {
		rankStr := fmt.Sprintf("%d", rank)
		if i == 0 {
			rankStr = "ü•á " + rankStr
		} else if i == 1 {
			rankStr = "ü•à " + rankStr
		} else if i == 2 {
			rankStr = "ü•â " + rankStr
		} else {
			rankStr = "  " + rankStr
		}

		profitColor := ""
		if r.TotalProfit > 0 {
			profitColor = fmt.Sprintf("+%.2f%%", r.TotalProfit*100)
		} else {
			profitColor = fmt.Sprintf("%.2f%%", r.TotalProfit*100)
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
		timeStr := fmt.Sprintf("%v", r.ExecutionTime)
		if r.ExecutionTime > time.Second {
			timeStr = fmt.Sprintf("%.1fs", r.ExecutionTime.Seconds())
		} else {
			timeStr = fmt.Sprintf("%.0fms", float64(r.ExecutionTime.Nanoseconds())/1e6)
		}

		fmt.Printf("%-18s %-12s %-10d $%-14.2f %-10s %-12s\n",
			r.Name,
			profitColor,
			r.TradeCount,
			r.FinalPortfolio,
			timeStr,
			rankStr)
		rank++
	}

	// –í—ã–≤–æ–¥–∏–º –¥–∏–Ω–∞–º–∏–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
	// fmt.Println("\n" + strings.Repeat("=", 50))
	// fmt.Printf("üìâ –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è (%s)\n", mainStrategy.Name())
	// fmt.Println(strings.Repeat("=", 50))
	// for i, val := range mainResult.PortfolioValues {
	// 	if i < len(candles) {
	// 		t := candles[i].ToTime().Format("15:04")
	// 		fmt.Printf("[%s] $%.2f\n", t, val)
	// 	} else if i == len(candles) {
	// 		fmt.Printf("[FINAL] $%.2f\n", val)
	// 	}
	// }
}
