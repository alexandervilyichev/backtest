// main.go
package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"log"
	"os"
	"runtime/pprof"
	"sort"
	"strings"
	"time"

	"bt/internal"

	"bt/internal/app/backtester"

	_ "bt/strategies/extrema"
	_ "bt/strategies/lines"
	_ "bt/strategies/momentum"
	_ "bt/strategies/moving_averages"
	_ "bt/strategies/oscillators"
	_ "bt/strategies/rebalance"
	_ "bt/strategies/sell"
	_ "bt/strategies/simple"
	_ "bt/strategies/statistical"
	_ "bt/strategies/trend"
	_ "bt/strategies/volatility"
	_ "bt/strategies/volume"
	_ "bt/strategies/wave"
)

func LoadCandlesFromFile(filename string) []internal.Candle {
	data, err := os.ReadFile(filename)
	if err != nil {
		log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:", err)
	}

	var wrapper struct {
		Candles []internal.Candle `json:"candles"`
	}

	err = json.Unmarshal(data, &wrapper)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", err)
	}

	// Precompute ParsedTime to optimize ToTime() calls for better performance
	// Handle empty time strings gracefully to avoid parsing errors
	for i := range wrapper.Candles {
		if wrapper.Candles[i].Time != "" {
			// Compute and store time.Time with multiple format fallbacks
			t, err := time.Parse(time.RFC3339, wrapper.Candles[i].Time)
			if err != nil {
				// Try RFC3339Nano format
				t, err = time.Parse(time.RFC3339Nano, wrapper.Candles[i].Time)
				if err != nil {
					// Try format without timezone
					t, err = time.Parse("2006-01-02T15:04:05", wrapper.Candles[i].Time)
					if err != nil {
						log.Printf("‚ùå –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å –¥–ª—è: '%s', –∏—Å–ø–æ–ª—å–∑—É–µ–º zero time", wrapper.Candles[i].Time)
						t = time.Time{} // Use zero time for invalid formats
					}
				}
			}
			wrapper.Candles[i].ParsedTime = t
		}
		// If Time is empty, ParsedTime remains as zero time (already set by UnmarshalJSON)
	}

	sort.Slice(wrapper.Candles, func(i, j int) bool {
		return wrapper.Candles[i].ParsedTime.Before(wrapper.Candles[j].ParsedTime)
	})

	fmt.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d —Å–≤–µ—á–µ–π –∏–∑ %s\n", len(wrapper.Candles), filename)
	return wrapper.Candles
}

func main() {
	// –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	config := parseFlags()

	// –ó–∞–ø—É—Å–∫ CPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
	if config.CpuProfile != "" {
		f, err := os.Create(config.CpuProfile)
		if err != nil {
			log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª CPU –ø—Ä–æ—Ñ–∏–ª—è:", err)
		}
		defer f.Close()
		if err := pprof.StartCPUProfile(f); err != nil {
			log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å CPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ:", err)
		}
		defer pprof.StopCPUProfile()
	}

	// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
	candles := LoadCandlesFromFile(config.Filename)
	if len(candles) == 0 {
		log.Fatal("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	runner := createRunner(config)
	printer := backtester.NewConsolePrinter()
	saver := backtester.NewFileSaver()

	// –ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
	results, err := runStrategies(config, runner, candles)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: %v", err)
	}

	// –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	printer.PrintComparison(results)

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
	if config.SaveSignals > 0 {
		fmt.Printf("%s", "\n"+strings.Repeat("=", 100)+"\n")
		fmt.Printf("üíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –¢–û–ü-%d –°–¢–†–ê–¢–ï–ì–ò–ô –î–õ–Ø –ì–†–ê–§–ò–ö–û–í\n", config.SaveSignals)
		fmt.Println(strings.Repeat("=", 100))

		if err := saver.SaveTopStrategies(candles, results, config.Filename, config.SaveSignals); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
	} else if config.Debug {
		fmt.Println("\nüí° –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Ñ–ª–∞–≥–æ–º --save_signals=0")
	}

	// Memory –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
	if config.MemProfile != "" {
		f, err := os.Create(config.MemProfile)
		if err != nil {
			log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª memory –ø—Ä–æ—Ñ–∏–ª—è:", err)
		}
		if err := pprof.WriteHeapProfile(f); err != nil {
			log.Fatal("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å memory –ø—Ä–æ—Ñ–∏–ª—å:", err)
		}
		f.Close()
	}
}

// parseFlags ‚Äî –ø–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func parseFlags() backtester.Config {
	filename := flag.String("file", "C:/Users/alexa/OneDrive/–î–æ–∫—É–º–µ–Ω—Ç—ã/Projects/backtest/candles.json", "–ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É —Å–æ —Å–≤–µ—á–∞–º–∏")
	strategyName := flag.String("strategy", "all", "–°—Ç—Ä–∞—Ç–µ–≥–∏—è: all (–≤—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏) –∏–ª–∏ "+strings.Join(internal.GetStrategyNames(), ", "))
	debug := flag.Bool("debug", false, "–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")
	saveSignals := flag.Int("save_signals", 0, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ø-N —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ (0 = –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å)")
	cpuProfile := flag.String("cpu_profile", "", "–§–∞–π–ª –¥–ª—è CPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—É—Å—Ç–æ = –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
	memProfile := flag.String("mem_profile", "", "–§–∞–π–ª –¥–ª—è –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–ø—É—Å—Ç–æ = –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
	flag.Parse()

	return backtester.Config{
		Filename:    *filename,
		Strategy:    *strategyName,
		Debug:       *debug,
		SaveSignals: *saveSignals,
		CpuProfile:  *cpuProfile,
		MemProfile:  *memProfile,
	}
}

// createRunner ‚Äî —Å–æ–∑–¥–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π runner –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
func createRunner(config backtester.Config) backtester.StrategyRunner {
	if config.Strategy == "all" {
		return backtester.NewParallelStrategyRunner(config.Debug)
	}
	return backtester.NewSingleStrategyRunner(config.Debug)
}

// runStrategies ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –ø–æ–º–æ—â—å—é runner
func runStrategies(config backtester.Config, runner backtester.StrategyRunner, candles []internal.Candle) ([]backtester.BenchmarkResult, error) {
	if config.Strategy == "all" {
		return runner.RunAllStrategies(candles)
	}

	// –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Ä—É—á–Ω—É—é
	mainResult, err := runner.RunStrategy(config.Strategy, candles)
	if err != nil {
		return nil, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º Buy & Hold –∫–∞–∫ –±–µ–Ω—á–º–∞—Ä–∫
	bnhStrategy := internal.GetStrategy("buy_and_hold")
	var bnhResult internal.BacktestResult
	if bnhSolidStrategy, ok := bnhStrategy.(internal.SolidStrategy); ok {
		bnhConfig := bnhSolidStrategy.DefaultConfig()
		bnhSignals := bnhSolidStrategy.GenerateSignalsWithConfig(candles, bnhConfig)
		bnhResult = internal.Backtest(candles, bnhSignals, 0.01)
	} else {
		fmt.Println("‚ö†Ô∏è  Buy & Hold –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç SOLID –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É")
		bnhResult = internal.BacktestResult{} // Empty result if not SOLID compatible
	}

	results := []backtester.BenchmarkResult{
		*mainResult,
		{
			Name:           bnhStrategy.Name(),
			TotalProfit:    bnhResult.TotalProfit,
			TradeCount:     bnhResult.TradeCount,
			FinalPortfolio: bnhResult.FinalPortfolio,
			ExecutionTime:  mainResult.ExecutionTime, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ –∂–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
		},
	}

	return results, nil
}
